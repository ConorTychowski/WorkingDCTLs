__CONSTANT__ float PI = 3.1415926535897932384626;

__DEVICE__ float3 DItoLinear(float3 in) {
    float3 out;

    float DI_A = 0.0075;
    float DI_B = 7.0;
    float DI_C = 0.07329248;
    float DI_M = 10.44426855;
    float DI_LOG_CUT = 0.02740668;

    out.x = in.x > DI_LOG_CUT ? _powf(2, (in.x / DI_C) - DI_B) - DI_A : in.x / DI_M; 
    out.y = in.y > DI_LOG_CUT ? _powf(2, (in.y / DI_C) - DI_B) - DI_A : in.y / DI_M; 
    out.z = in.z > DI_LOG_CUT ? _powf(2, (in.z / DI_C) - DI_B) - DI_A : in.z / DI_M;

    return out; 
}

__DEVICE__ float3 mv_33_3(float mat[3][3], float3 v) {
    float3 out = make_float3(mat[0][0] * v.x + mat[0][1] * v.y + mat[0][2] * v.z,
                             mat[1][0] * v.x + mat[1][1] * v.y + mat[1][2] * v.z,
                             mat[2][0] * v.x + mat[2][1] * v.y + mat[2][2] * v.z);
    return out;
}

__DEVICE__ float mod(float x, float y) {
    if (x < 0) {
        return y + _fmod(x, y);
    } else {
        return _fmod(x, y);
    }
}

__DEVICE__ float3 CylindricaltoRGB(float3 hsv) {
    // Adapted from Juan Pablo Zambrano's code
    // hue is in range of 0-1
    float3 lsh = make_float3(hsv.z, hsv.y * 3.0, mod(hsv.x, 1.0) * 2.0 * PI);

    float ctr = lsh.x * lsh.y * _cosf(lsh.z);
    float ctg = lsh.x;
    float ctb = lsh.x * lsh.y * _sinf(lsh.z);
    float3 c = make_float3(ctr, ctg, ctb);

    float mat[3][3] = {
        {2.0 / 3.0, 1.0, 0.0},
        {-1.0 / 3.0, 1.0, _sqrtf(3.0) / 3.0},
        {-1.0 / 3.0, 1.0, -_sqrtf(3.0) / 3.0},
    };

    return mv_33_3(mat, c);
}

__DEVICE__ float3 RGBtoCylindrical(float3 x) {

    // Matrix aligns and scales achromatic white (1, 1, 1) with (0, 1, 0)
    // Also rotates input (1, 0, 0) above the red axis and ensures that
    // (1, 0, 0) input ends up having a red channel code value of (1).
    // outputs hue in range 0-1
    float mat[3][3] = {
        {1.0, -1.0 / 2.0, -1.0 / 2.0},
        {1.0 / 3.0, 1.0 / 3.0, 1.0 / 3.0},
        {0.0, _sqrtf(3.0) / 2.0, -_sqrtf(3.0) / 2.0},
    };

    float3 rotated_color = mv_33_3(mat, x);
    float l = rotated_color.y;
    float3 hsl = make_float3(0.0, 0.0, 0.0);

    float3 normalized_color = rotated_color / l;
    if (l == 0.0) {
        hsl = make_float3(0.0, 0.0, l);
    } else {
        float theta = _atan2f(normalized_color.z, normalized_color.x);
        hsl.x = mod(theta, 2.0 * PI) / (2.0 * PI);
        hsl.y = _hypotf(normalized_color.x, normalized_color.z) / 3.0;
        hsl.z = l;
    }
    return hsl;
}

__DEVICE__ float3 RGB_to_HSV( float3 RGB ) {
float3 HSV;

	float min = _fminf(_fminf(RGB.x, RGB.y), RGB.z);
	float max = _fmaxf(_fmaxf(RGB.x, RGB.y), RGB.z);
	float delta = max - min;

	HSV.z = max;

	if (max != 0.0f) {
		HSV.y = delta / max;

	} else {
		HSV.y = 0.0f;
		HSV.x = 0.0f;
		return HSV;
	}

	if (delta == 0.0f) {
		HSV.x = 0.0f;
	} else if (RGB.x == max) {
		HSV.x = (RGB.y - RGB.z) / delta;
	} else if (RGB.y == max) {
		HSV.x = 2.0f + (RGB.z - RGB.x) / delta;
	} else {
		HSV.x = 4.0f + (RGB.x - RGB.y) / delta;
	}
	
	HSV.x *= 1.0f / 6.0f;

	if (HSV.x < 0.0f){
		HSV.x += 1.0f;
	}

	return HSV;
}

__DEVICE__ float3 HSV_to_RGB(float3 HSV) {
	float3 RGB;

	if (HSV.y == 0.0f) {
		RGB.x = RGB.y = RGB.z = HSV.z;
	} else {
		HSV.x *= 6.0f;
		float i = _floorf(HSV.x);
		float f = HSV.x - i;
		i = i >= 0.0f ? _fmod(i, 6.0f) : _fmod(i, 6.0f) + 6.0f;
		float p = HSV.z * (1.0f - HSV.y);
		float q = HSV.z * (1.0f - HSV.y * f);
		float t = HSV.z * (1.0f - HSV.y * (1.0f - f));
		RGB.x = i == 0.0f ? HSV.z : i == 1.0f ? q : i == 2.0f ? p : i == 3.0f ? p : i == 4.0f ? t : HSV.z;
		RGB.y = i == 0.0f ? t : i == 1 ? HSV.z : i == 2.0f ? HSV.z : i == 3.0f ? q : i == 4.0f ? p : p;
		RGB.z = i == 0.0f ? p : i == 1 ? p : i == 2.0f ? t : i == 3.0f ? HSV.z : i == 4.0f ? HSV.z : q;
	}
	return RGB;
}

__DEVICE__ float PrimaryLuma(float3 RGB){

	float maxVal = _fmaxf(RGB.x, _fmaxf(RGB.y, RGB.z));
	float minVal = _fminf(RGB.x, _fminf(RGB.y, RGB.z));
	float midVal = (RGB.x + RGB.y + RGB.z) - maxVal - minVal;

	float luma = (-maxVal + (2 * minVal) + (2 * midVal)) / 3.0f;

	return luma; 
}

__DEVICE__ float3 MixLuma(float3 RGB, float luma, float weight) {

	RGB.x = luma * (1.0f - weight) + RGB.x * (1.0f * weight); 
	RGB.y = luma * (1.0f - weight) + RGB.y * (1.0f * weight);
	RGB.z = luma * (1.0f - weight) + RGB.z * (1.0f * weight);
	return RGB;
}

__DEVICE__ float3 Clamp(float3 RGB){

	float min_val = 0.0;
	//float max_val = 1.0;

	RGB.x = _fmaxf(RGB.x, min_val);
	RGB.y = _fmaxf(RGB.y, min_val);
	RGB.z = _fmaxf(RGB.z, min_val);

	return RGB; 
}

__DEVICE__ float BezierMaskSimple (float in, float keyneutrals, float keyvibrants, float thresholdhi, float thresholdlo){

    // Dynamic Sliders 
    float dynthresholdlo = _fminf(thresholdlo, thresholdhi - 0.25);

    // Inversions
    float invkeyneutrals = 1 - keyneutrals;
    float invkeyvibrants = 1 - keyvibrants;

    // Functions
    float m = (in - dynthresholdlo) / (thresholdhi - dynthresholdlo);
    float n = 1 - m;
    float o = 1 - invkeyneutrals;
    float p = 1 - invkeyvibrants;
    float q = _powf(n,5) * o + 5 * m * _powf(n,4) * o + 10 * _powf(m,2) * _powf(n,3) * o + 10 * _powf(m,3) * _powf(n,2) * p + 5 * _powf(m,4) * n * p + _powf(m,5) * p;


    // Piecewise
    if (in < dynthresholdlo){
        return o;
    }
    if (dynthresholdlo <= in && in <= thresholdhi){
        return q; 
    }
    if (thresholdhi < in){
        return p;
    }
}

__DEVICE__ float3 BezierMaskSimpleF3 (float3 in, float keyneutrals, float keyvibrants, float thresholdhi, float thresholdlo){
    float3 out = in; 

    out.x = BezierMaskSimple(out.x, keyneutrals, keyvibrants, thresholdhi, thresholdlo);
    out.y = BezierMaskSimple(out.y, keyneutrals, keyvibrants, thresholdhi, thresholdlo);
    out.z = BezierMaskSimple(out.z, keyneutrals, keyvibrants, thresholdhi, thresholdlo);

    return out;
}

__DEVICE__ float3 TransparencyOverlay(float3 in, float matte, bool matteMode, float X, float Y, float height){
    float3 out = in;

    if (matteMode){
        out = make_float3(matte, matte, matte);
    } else {
        float transparentColour = 0.3;
        float squareSize = height / 32;

        int row = _floorf(X / squareSize);
        int col = _floorf(Y / squareSize);

        if ((row + col) % 2 == 0 ) transparentColour = 0.35;

        out = make_float3(transparentColour, transparentColour, transparentColour) * (1 - matte) + in * matte;

    }
    return out;
}

DEFINE_UI_PARAMS(p_Den, Density Strength, DCTLUI_SLIDER_FLOAT, 0.0, 0.0, 0.75, 0.001)

DEFINE_UI_PARAMS(p_keyneutrals, Key Neutrals, DCTLUI_SLIDER_FLOAT, 1, 0, 1, 0.001)
DEFINE_UI_PARAMS(p_keyvibrants, Key Vibrants, DCTLUI_SLIDER_FLOAT, 1, 0, 1, 0.001)
DEFINE_UI_PARAMS(p_thresholdhi, Threshold Hi, DCTLUI_SLIDER_FLOAT, 0.75, 0.2, 1, 0.001)
DEFINE_UI_PARAMS(p_thresholdlo, Threshold Lo, DCTLUI_SLIDER_FLOAT, 0, 0, 0.2, 0.001)

DEFINE_UI_PARAMS(opt_showsatcurve, Show Key Curve, DCTLUI_CHECK_BOX, 0)
DEFINE_UI_PARAMS(p_Checkerboard, Show Checkerboard, DCTLUI_CHECK_BOX, 0)
DEFINE_UI_PARAMS(p_SatMatte, Show Matte, DCTLUI_CHECK_BOX, 0)

DEFINE_UI_PARAMS(check_clamp, Clamp Output, DCTLUI_CHECK_BOX, 0)

__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, float p_R, float p_G, float p_B){
	float3 in_RGB = make_float3(p_R, p_G, p_B);
	float3 in_Linear = DItoLinear(in_RGB);
    float3 in_Cylindrical = RGBtoCylindrical(in_Linear);
 	float3 out = in_RGB;

	if (p_Den == 0.75){
		p_Den = p_Den - 1e-6;
	}
	
	float luma = PrimaryLuma(in_RGB);
	float weight = 1 - p_Den;
	float satmatte = BezierMaskSimple(in_Cylindrical.y, p_keyneutrals, p_keyvibrants, p_thresholdhi, p_thresholdlo);

	out = MixLuma(in_RGB, luma, weight);

	out = RGB_to_HSV(out);
	out.y = out.y / weight;
	out = HSV_to_RGB(out);

	// Mask on Effect
    out = in_RGB * (1 - satmatte) + out * satmatte;

    if (check_clamp == 1){
		out = Clamp(out);
	}

	 // Overlays - Base Floats 
    float width = (float)p_Width;
    float height = (float)p_Height;
    float X = (float)p_X;
    float Y = (float)p_Y;

    // Overlays - Handy Calculations 
    float xW = X/width;
    float hY = height - Y; 

    // Overlays - Float 3 Ramps for various features  
    float3 satcurve = make_float3(xW, xW, xW);

    // Matte Display
    out = in_RGB * (1 - satmatte) + out * satmatte;
    if (p_Checkerboard){
        out = TransparencyOverlay(out, satmatte, p_SatMatte, (float)p_X, (float) p_Y, (float) p_Height);
    }

    // Sat Curve Display
    if (opt_showsatcurve == 1) {

    	satcurve = BezierMaskSimpleF3(satcurve, p_keyneutrals, p_keyvibrants, p_thresholdhi, p_thresholdlo);

        float overlayR = satcurve.x >= (hY - 2.0f) / height && satcurve.x <= (hY + 2.0f) / height ? 0.85f : 0.0f;
        float overlayG = satcurve.y >= (hY - 2.0f) / height && satcurve.y <= (hY + 2.0f) / height ? 0.85f : 0.0f;
        float overlayB = satcurve.z >= (hY - 2.0f) / height && satcurve.z <= (hY + 2.0f) / height ? 0.85f : 0.0f;

        out.x = overlayR == 0.0f ? out.x : overlayR;
        out.y = overlayG == 0.0f ? out.y : overlayG;
        out.z = overlayB == 0.0f ? out.z : overlayB;
    }

	return out;
}